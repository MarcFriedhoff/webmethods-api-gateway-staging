# Pipeline template for apig staging

parameters:
  apiProject: ''
  build_environment: ''
  target_environment: ''
  target_type: ''
  prep_condition: ''
  test_condition: ''

steps:
- bash: |
    if [ -z "$APIPROJECT" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"apiProject\""
      echo "##vso[task.complete result=Failed;]"
    fi
    if [ -z "$BUILD_ENVIRONMENT" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"build_environment\""
      echo "##vso[task.complete result=Failed;]"
    fi
    if [ -z "$TARGET_ENVIRONMENT" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"target_environment\""
      echo "##vso[task.complete result=Failed;]"
    fi
    if [ -z "$TARGET_TYPE" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"target_type\""
      echo "##vso[task.complete result=Failed;]"
    fi
    if [ -z "$PREP_CONDITION" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"prep_condition\""
      echo "##vso[task.complete result=Failed;]"
    fi
    if [ -z "$TEST_CONDITION" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"test_condition\""
      echo "##vso[task.complete result=Failed;]"
    fi
  env:
    APIPROJECT: ${{parameters.apiProject}}
    BUILD_ENVIRONMENT: ${{parameters.build_environment}}
    TARGET_ENVIRONMENT: ${{parameters.target_environment}}
    TARGET_TYPE: ${{parameters.target_type}}
    PREP_CONDITION: ${{parameters.prep_condition}}
    TEST_CONDITION: ${{parameters.test_condition}}
  displayName: Check for required parameters

- bash: |
   echo "##vso[task.setvariable variable=build_environment_hostname]`jq -r '.values[] | select(.key == "hostname") | .value' environments/${{parameters.build_environment}}`"
   echo "##vso[task.setvariable variable=build_environment_ip]`jq -r '.values[] | select(.key == "ip") | .value' environments/${{parameters.build_environment}}`"
   echo "##vso[task.setvariable variable=build_environment_port]`jq -r '.values[] | select(.key == "port") | .value' environments/${{parameters.build_environment}}`"
   echo "##vso[task.setvariable variable=build_environment_insecureflag]`jq -r '.values[] | select(.key == "insecureflag") | .value' environments/${{parameters.build_environment}}`"
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Read and parse API Gateway BUILD configuration, extract ip, hostname, port and insecureflag'

- bash: |
   echo "##vso[task.setvariable variable=target_environment_hostname]`jq -r '.values[] | select(.key == "hostname") | .value' environments/${{parameters.target_environment}}`"
   echo "##vso[task.setvariable variable=target_environment_ip]`jq -r '.values[] | select(.key == "ip") | .value' environments/${{parameters.target_environment}}`"
   echo "##vso[task.setvariable variable=target_environment_port]`jq -r '.values[] | select(.key == "port") | .value' environments/${{parameters.target_environment}}`"
   echo "##vso[task.setvariable variable=target_environment_insecureflag]`jq -r '.values[] | select(.key == "insecureflag") | .value' environments/${{parameters.target_environment}}`"
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Read and parse API Gateway ${{parameters.target_type}} configuration, extract ip, hostname, port and insecureflag'

- task: JFrog.jfrog-artifactory-vsts-extension.artifactory-generic-upload.ArtifactoryGenericUpload@2
  displayName: 'Artifactory Build Upload'
  inputs:
    artifactoryService: '$(artifactoryService)'
    fileSpec: |
      {
        "files": [
          {
            "pattern": "$(System.DefaultWorkingDirectory)/$(Build.BuildId)_export_for_${{parameters.target_type}}.zip",
            "target": "$(artifactoryFolder)/apigw-staging-test/"
          }
        ]
      }